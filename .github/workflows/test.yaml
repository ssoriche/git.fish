name: Test Fish Functions

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Fish Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Fish Shell
        run: |
          sudo apt-get update
          sudo apt-get install -y fish

      - name: Check Fish syntax
        run: |
          echo "Checking syntax for all fish functions..."
          for file in functions/*.fish; do
            echo "Checking: $file"
            fish --no-execute "$file"
          done

      - name: Run syntax compliance tests
        run: |
          echo "Running fish shell syntax compliance tests..."
          fish tests/syntax-tests.fish

      - name: Check function formatting
        run: |
          echo "Checking code formatting..."
          for file in functions/*.fish; do
            echo "Formatting check: $file"
            fish_indent < "$file" > "/tmp/$(basename $file)"
            if ! diff -u "$file" "/tmp/$(basename $file)"; then
              echo "❌ $file is not properly formatted"
              echo "Run: fish_indent < $file > temp && mv temp $file"
              exit 1
            else
              echo "✅ $file is properly formatted"
            fi
          done

  test-functions:
    name: Test Function Loading
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Fish Shell
        run: |
          sudo apt-get update
          sudo apt-get install -y fish

      - name: Test function loading
        run: |
          export FISH_FUNCTIONS_DIR="$PWD/functions"
          fish -c "
            # Add our functions directory to fish function path
            set -p fish_function_path $FISH_FUNCTIONS_DIR

            echo 'Testing function loading...'

            # Test each function can be loaded
            for func_file in $FISH_FUNCTIONS_DIR/*.fish
              set func_name (basename \$func_file .fish)
              echo 'Loading function: '\$func_name

              # Source the function
              source \$func_file

              # Check if function exists
              if not functions -q \$func_name
                echo 'ERROR: Function '\$func_name' failed to load'
                exit 1
              end

              echo 'SUCCESS: Function '\$func_name' loaded successfully'
            end

            echo 'All functions loaded successfully!'
          "

      - name: Test help functionality
        run: |
          export FISH_FUNCTIONS_DIR="$PWD/functions"
          fish -c "
            set -p fish_function_path $FISH_FUNCTIONS_DIR

            echo 'Testing help functionality...'

            # Load all functions
            for func_file in $FISH_FUNCTIONS_DIR/*.fish
              source \$func_file
            end

            # Test help for functions that support it
            set help_functions git-wadd git-wclean git-wjump git-wrm git-bclean git-diff-plain git-show-plain cwb

            for func in \$help_functions
              echo 'Testing help for: '\$func
              if functions -q \$func
                # Try to get help output (should not error)
                \$func --help > /dev/null
                if test \$status -eq 0
                  echo 'SUCCESS: '\$func' help works'
                else
                  echo 'WARNING: '\$func' help returned non-zero status'
                end
              end
            end
          "

  test-git-integration:
    name: Test Git Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Fish Shell and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fish git

      - name: Setup test git repository
        run: |
          # Create a test git repo
          mkdir test-repo
          cd test-repo

          # Initialize with main as the initial branch
          git init -b main
          git config user.name "Test User"
          git config user.email "test@example.com"

          echo "# Test Repository" > README.md
          git add README.md
          git commit -m "Initial commit"

          # Create a test branch
          git checkout -b test-branch
          echo "Test content" > test.txt
          git add test.txt
          git commit -m "Add test content"
          git checkout main

      - name: Test basic git wrapper functionality
        run: |
          export FISH_FUNCTIONS_DIR="$PWD/functions"
          cd test-repo
          fish -c "
            set -p fish_function_path $FISH_FUNCTIONS_DIR
            source $FISH_FUNCTIONS_DIR/git.fish

            echo 'Testing git wrapper...'

            # Test standard git command passthrough
            git status
            if test \$status -ne 0
              echo 'ERROR: git wrapper failed for standard command'
              exit 1
            end

            echo 'SUCCESS: git wrapper works for standard commands'
          "

      - name: Test cwb function
        run: |
          export FISH_FUNCTIONS_DIR="$PWD/functions"
          cd test-repo
          fish -c "
            set -p fish_function_path $FISH_FUNCTIONS_DIR
            source $FISH_FUNCTIONS_DIR/cwb.fish

            echo 'Testing cwb function...'

            set current_branch (cwb)
            if test \"\$current_branch\" = 'main' -o \"\$current_branch\" = 'master'
              echo 'SUCCESS: cwb returned current branch: '\$current_branch
            else
              echo 'ERROR: cwb returned unexpected branch: '\$current_branch
              exit 1
            end
          "

      - name: Run functional tests
        run: |
          echo "Running functional tests..."
          fish tests/functional-tests.fish

  test-dependencies:
    name: Test Optional Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Fish Shell
        run: |
          sudo apt-get update
          sudo apt-get install -y fish

      - name: Test without fzf (should handle gracefully)
        run: |
          export FISH_FUNCTIONS_DIR="$PWD/functions"
          fish -c "
            set -p fish_function_path $FISH_FUNCTIONS_DIR
            source $FISH_FUNCTIONS_DIR/git-wjump.fish

            echo 'Testing git-wjump without fzf...'

            # This should fail gracefully with an error message
            if git-wjump --help > /dev/null 2>&1
              echo 'SUCCESS: git-wjump help works without fzf'
            else
              echo 'ERROR: git-wjump help failed'
              exit 1
            end
          "

      - name: Install fzf and test
        run: |
          # Install fzf
          sudo apt-get install -y fzf

          export FISH_FUNCTIONS_DIR="$PWD/functions"
          fish -c "
            set -p fish_function_path $FISH_FUNCTIONS_DIR
            source $FISH_FUNCTIONS_DIR/git-wjump.fish

            echo 'Testing git-wjump with fzf installed...'

            # Help should still work
            if git-wjump --help > /dev/null 2>&1
              echo 'SUCCESS: git-wjump help works with fzf'
            else
              echo 'ERROR: git-wjump help failed with fzf'
              exit 1
            end
          "

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test-functions]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Fish Shell and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fish git fzf

      - name: Run integration tests
        run: |
          export FISH_FUNCTIONS_DIR="$PWD/functions"

          # Create test directory
          mkdir -p /tmp/git-fish-test
          cd /tmp/git-fish-test

          fish -c "
            set -p fish_function_path $FISH_FUNCTIONS_DIR

            # Load all functions
            for func_file in $FISH_FUNCTIONS_DIR/*.fish
              source \$func_file
            end

            echo 'Running integration tests...'

            # Test in a git repository context
            git init -b main
            git config user.name 'Test User'
            git config user.email 'test@example.com'
            echo '# Test' > README.md
            git add README.md
            git commit -m 'Initial commit'

            # Test cwb
            set branch (cwb)
            echo 'Current branch: '\$branch

            # Test git wrapper
            git status

            echo 'Integration tests completed successfully!'
          "
